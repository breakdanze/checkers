### Starting build.
# Target: board.mli.depends, tags: { package(ANSITerminal), extension:mli, file:board.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules board.mli > board.mli.depends
# Target: board.cmi, tags: { package(ANSITerminal), byte, compile, extension:mli, file:board.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o board.cmi board.mli
# Target: board.ml.depends, tags: { package(ANSITerminal), extension:ml, file:board.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules board.ml > board.ml.depends
# Target: board.cmo, tags: { package(ANSITerminal), byte, compile, extension:cmo, extension:ml, file:board.cmo, file:board.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o board.cmo board.ml
# Target: command.mli.depends, tags: { package(ANSITerminal), extension:mli, file:command.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules command.mli > command.mli.depends
# Target: command.cmi, tags: { package(ANSITerminal), byte, compile, extension:mli, file:command.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o command.cmi command.mli
# Target: command.ml.depends, tags: { package(ANSITerminal), extension:ml, file:command.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules command.ml > command.ml.depends
# Target: command.cmo, tags: { package(ANSITerminal), byte, compile, extension:cmo, extension:ml, file:command.cmo, file:command.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o command.cmo command.ml
# Target: main.mli.depends, tags: { package(ANSITerminal), extension:mli, file:main.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules main.mli > main.mli.depends
# Target: main.cmi, tags: { package(ANSITerminal), byte, compile, extension:mli, file:main.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o main.cmi main.mli
# Target: main.ml.depends, tags: { package(ANSITerminal), extension:ml, file:main.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules main.ml > main.ml.depends
# Target: main.cmo, tags: { package(ANSITerminal), byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o main.cmo main.ml
# Target: authors.mli.depends, tags: { package(ANSITerminal), extension:mli, file:authors.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules authors.mli > authors.mli.depends
# Target: authors.cmi, tags: { package(ANSITerminal), byte, compile, extension:mli, file:authors.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o authors.cmi authors.mli
# Target: authors.ml.depends, tags: { package(ANSITerminal), extension:ml, file:authors.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules authors.ml > authors.ml.depends
# Target: authors.cmo, tags: { package(ANSITerminal), byte, compile, extension:cmo, extension:ml, file:authors.cmo, file:authors.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o authors.cmo authors.ml
# Compilation successful.
